


Hey developer's . Just an another day interacting with my fellow collegues. He told about the includes in array. 
As we all know it's an inbuild Array functionality that will return boolean based on the logic. 
But what happens inside . Yeah ! the same question i have in my mind . 
Let crack what happens inside the includes function in array. 

First we have to know the purpose of the includes method in array. Basically The includes() method of Array instances determines whether an array includes a certain value among its entries, based on that it will returning true or false. 

Example : 
    Just defined a array variable (nameList) with the list of my collegues names. I'm going to check the one the name in the following array using includes().
    
    const nameList = ['ram','joyal','ayoob','abdul','vasanth','alan'];
    console.log(nameList.includes('joyal')); // output : true;

Syntax : 

    Source.includes(searchElement)
    Source.includes(searchElement, fromIndex)

Parameter : 
    Source --> Array of values 
    searchElement -->   value to search for
    fromIndex --> index at which to start searching


Case 1 : 
    const nameList = ['ram','joyal','ayoob','abdul','vasanth','alan'];
    console.log(nameList.includes('ayoob',1)) 

    // what happen interally 
    nameList.length = 6;
    fromIndex = 1 
    nameList.length > fromIndex ;
    //  loop to check the value.
// it will check the value in the array by omitting the 0th index in our case the ram will be omited and start search . and the searchvalue is available so it return true. 

case 2 : 
    what happen if i gave fromIndex more than the length of the source Array. 

    const nameList = ['ram','joyal','ayoob','abdul','vasanth','alan'];
    console.log(nameList.includes('ayoob',10)) 

     // what happen interally 
     nameList.length > fromIndex  // return false ;
    so the array is not searched return false 

case 3 : 

    ok, Let try with some negative index . 

    const nameList = ['ram','joyal','ayoob','abdul','vasanth','alan'];
    console.log(nameList.includes('ayoob',-1))  // return false 
    
     // what happen interally   

     -nameList.length <= fromIndex < 0 ;
     if the from is negative it's taken soruce.length + fromIndex as the fromIndex and check the entire array.
     
     In the above case 
        fromIndex is -1 and  nameList.length will be 6 
        nameList.includes('ayoob', 6 -1 );
        nameList.includes('ayoob' , 5);
        // return false 
    
Case 4 : 

    const nameList = ['ram','joyal','ayoob','abdul',NaN,'alan'];
    console.log(nameList.includes(NaN))
    // return true 

    Because the includes method uses the SameValueZero comparsion algorithm . similar to === but treats NaN  is equals to NaN. 


SameValueZero algorithm : 

    it is similar to strict equality but one major difference is
         NaN === NaN is false, but SameValueZero(NaN, NaN) is true.
        
    function SameValueZero(x,y){
        return x === y || (x !== x && y !== y );
    }
    
    Rules:
        The two values are strictly equal (===)
        Both are NaN
    Warning 
        It does not distinguish between +0 and -0 (they are treated as equal).


        Value A	    Value B	    ===	        SameValueZero
            1       1	        ✅ true	    ✅ true
            'a'     'a'         ✅ true       ✅ true
            0	    -0	        ✅ true	    ✅ true
            NaN	    NaN	        ❌ false	    ✅ true
        undefined	null	    ❌ false	    ❌ false



-------------------------------------------------------------

# 🔍 Understanding `Array.includes()` in JavaScript – What Happens Under the Hood?



Hey developers 👋,

Just another casual day discussing code with my colleagues when one of them brought up something surprisingly interesting — the good old `includes()` method in JavaScript arrays. Most of us use it regularly, but have you ever paused and asked:

**"What really happens inside `includes()`?"**

Let’s explore how it works, including edge cases and the comparison logic behind it.


## 🧠 What is `Array.prototype.includes()`?

The `includes()` method determines whether an array contains a specified element. It returns a **boolean**: `true` if the element is found, `false` otherwise.

### ✅ Syntax:

```js
array.includes(searchElement)
array.includes(searchElement, fromIndex)
```

* **`searchElement`**: The value to search for.
* **`fromIndex`** *(optional)*: The position in the array at which to start the search. Defaults to `0`.


## 📦 Example: Simple Usage

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', 'vasanth', 'alan'];
console.log(nameList.includes('joyal')); // Output: true
```


## ⚙️ How It Works Internally

Let’s dive into different scenarios and break them down.

### 🔁 Case 1: Using `fromIndex` Within Array Length

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', 'vasanth', 'alan'];
console.log(nameList.includes('ayoob')); // Output: true
```

**What happens:**

* `nameList.length = 6`
* `fromIndex = undefined`
* The method  begins checking from index `0` because the fromIndex is undefined
* `'ayoob'` is found at index `2` → returns `true`



### 🔁 Case 2: Using `fromIndex` Within Array Length

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', 'vasanth', 'alan'];
console.log(nameList.includes('ayoob', 1)); // Output: true
```

**What happens:**

* `nameList.length = 6`
* `fromIndex = 1`
* The method skips index `0` and begins checking from index `1`
* `'ayoob'` is found at index `2` → returns `true`


### 🚫 Case 3: `fromIndex` Exceeds Array Length

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', 'vasanth', 'alan'];
console.log(nameList.includes('ayoob', 10)); // Output: false
```

**Why?**

If `fromIndex > nameList.length`, the method short-circuits and returns `false` immediately. The array isn’t even searched.


### ➖ Case 4: Negative `fromIndex`

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', 'vasanth', 'alan'];
console.log(nameList.includes('ayoob', -1)); // Output: false
```

**What’s going on:**

* A negative index is interpreted as `array.length + fromIndex`
* In this case: `6 + (-1) = 5`, so search starts at index `5`
* `'ayoob'` is at index `2`, so it’s missed → returns `false`


### 🤯 Case 5: Searching for `NaN`

```js
const nameList = ['ram', 'joyal', 'ayoob', 'abdul', NaN, 'alan'];
console.log(nameList.includes(NaN)); // Output: true
```

**Wait, what?!**
You might expect this to return `false` because:

```js
NaN === NaN // false
```

But `includes()` **uses the `SameValueZero` algorithm**, which **treats `NaN` as equal to `NaN`**.


## 🔬 SameValueZero Comparison

Here’s a simplified version of how `SameValueZero` works:

```js
function SameValueZero(x, y) {
  return x === y || (x !== x && y !== y); // true for NaN === NaN
}
```

### 🔄 Comparison Table

| Value A | Value B |`==` Result  |`===`Result |`SameValueZero`Result |
| --------| ------- | ------------| ---------------|-------------|
| `1`     | `1`     | ✅ `true`     | ✅ `true`     | ✅ `true`  |
| `1`     | `'1'`   | ✅ `true`     | ❌ `false`     | ❌ `false`|
| `'a'`   | `'a'`   | ✅ `true`     | ✅ `true`     | ✅ `true`  |
| `0`     | `-0`    | ✅ `true`     | ✅ `true`     | ✅ `true`  |
| `NaN`   | `NaN`   | ❌ `false`    | ❌ `false`    | ✅ `true`  |      
| `undefined`| `null`| ❌ `false`  | ❌ `false`    | ❌ `false` |

**Important note:** `+0` and `-0` are treated as equal in both `===` and `SameValueZero`.


## 🧵 Final Thoughts


Next time you're debugging a subtle bug with `includes()`, remember: it’s not just a check — it's powered by **SameValueZero**, and how you set `fromIndex` *matters*.


If you found this helpful, drop a ❤️ or leave a comment. Happy coding!
 
### ✍️ Author: [Vetriselvan](https://dev.to/vetriselvan_11)

👨‍💻 Frontend Developer | Code Lover | Exploring Angular’s future
