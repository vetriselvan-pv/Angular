
@let : 

    @let allows you to define a local variable and re-use it across the template.

syntax : 

        @let variable_name = value ;

@let count = 1;
@let countryList = country$ | async;

Note : 
    Similarly to JavaScript variables, variables declared with @let, can be used:

        After they have been declared
        Within the bound of the same scope and nested scopes
    
Example : 

    You can directly declare the value or you can bind with the varibale declared in the ts file also. 

    @let text = 'Hello ' ;
<div class="country-list">
  @if (country$ | async ; as countryList) { @for (country of countryList; track
  $index ; let index = $index , even = $even, odd = $odd, last = $last , first =
  $first, count = $count; ) {
  <div class="country">
    <div class="label">
      <span>{{ index }} : {{ country.flag }}</span>
      <span> {{ country.name.common }} </span>
    </div>
    <hr />
    <div class="variable">
      <span style="color: red">Odd : {{ odd }} </span>
      <span style="color: blue">Even : {{ even }} </span>
      <span style="color: aqua">Last : {{ last }} </span>
      <span style="color: orange">First : {{ first }} </span>
      <span style="color: green">Count : {{ count }} </span>
    </div>
  </div>
  <span>
    text : 
    {{
      text
    }}
  </span>
  } }
</div>

or

html :

@let time = date;
<div class="country-list">
  @if (country$ | async ; as countryList) { @for (country of countryList; track
  $index ; let index = $index , even = $even, odd = $odd, last = $last , first =
  $first, count = $count; ) {
  <div class="country">
    <div class="label">
      <span>{{ index }} : {{ country.flag }}</span>
      <span> {{ country.name.common }} </span>
    </div>
    <hr />
    <div class="variable">
      <span style="color: red">Odd : {{ odd }} </span>
      <span style="color: blue">Even : {{ even }} </span>
      <span style="color: aqua">Last : {{ last }} </span>
      <span style="color: orange">First : {{ first }} </span>
      <span style="color: green">Count : {{ count }} </span>
    </div>
    <span> time : {{ time | json }} </span>
  </div>

  } }
</div>

ts : 
  date = new Date().toDateString();

Case 1 : 
 
  <div class="country-list">
  @let currentDate = date;
  @if (country$ | async ; as countryList) { @for (country of countryList; track
  $index ; let index = $index , even = $even, odd = $odd, last = $last , first =
  $first, count = $count; ) {
  <div class="country">
    <div class="label">
      <span>{{ index }} : {{ country.flag }}</span>
      <span> {{ country.name.common }} </span>
    </div>
    <hr />
    <div class="variable">
      <span style="color: red">Odd : {{ odd }} </span>
      <span style="color: blue">Even : {{ even }} </span>
      <span style="color: aqua">Last : {{ last }} </span>
      <span style="color: orange">First : {{ first }} </span>
      <span style="color: green">Count : {{ count }} </span>
    </div>
    <span> time : {{ currentDate | json }} </span>
  </div>

  } }
</div> 


{{
  currentDate
}}

Now the current date will be available . because it doesn't decalred under any scope .
the same will throw if we assign that inside the any scope. 
example: 
    @if(true){
  <div class="country-list">
  @let currentDate = date;
  @if (country$ | async ; as countryList) { @for (country of countryList; track
  $index ; let index = $index , even = $even, odd = $odd, last = $last , first =
  $first, count = $count; ) {
  <div class="country">
    <div class="label">
      <span>{{ index }} : {{ country.flag }}</span>
      <span> {{ country.name.common }} </span>
    </div>
    <hr />
    <div class="variable">
      <span style="color: red">Odd : {{ odd }} </span>
      <span style="color: blue">Even : {{ even }} </span>
      <span style="color: aqua">Last : {{ last }} </span>
      <span style="color: orange">First : {{ first }} </span>
      <span style="color: green">Count : {{ count }} </span>
    </div>
    <span> time : {{ currentDate | json }} </span>
  </div>

  } }
</div>
}


{{
  currentDate
}}

or if you try to use the variable even before initialize also will throw error . 