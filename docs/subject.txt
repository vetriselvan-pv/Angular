
Hey devs 

    we are exploring different topic each week . and this week let start exploring about the intersting topic about RxJS.


RxJs :
    RxJS is library for composing asynchrous and event based programs by using observable sequences. 
    we all know observable is basically lazy push collection of values. Let talk more than Observable haan a special kind of observable :)


Subject : 
    Subject is a special type of Observable that allows values to be multicasted to many Observers.they maintain a registry of many listeners ( maintain the each observers ).
    Every subject is an observable and at same time it's an observer. Exactly you can send value to subject at the same time you can subscribe to it also. 


Observer : 
    An Observer is a consumer of values delivered by an Observable. basically a set of callback notification received from the observable

    syntax 
    const observer = {
            next: (x) => { console.log('Observer got a next value: ' + x) }, // Succes callback
            error: (err) =>  { console.error('Observer got an error: ' + err) }, // Error callback
            complete: () =>  { console.log('Observer got a complete notification') }, // complete  callback
        };

Note :
    Observer cannot tell whether the Observable execution is coming from a  unicast Observable or a Subject.
    Later in this blog we explained the what happening under the hood of Suject.

example : 

    In this example we are going to explore how the subject works in different cases . 
    I tried to show some demo using angular . let's explore.

    HTML 

    <h3>Subject</h3>

<div class="text-wrapper">
  <div class="text">
    <textarea class="textarea-modern" [(ngModel)]="subjectText" name="subject" id="subject"></textarea>
    <div class="btn-container">
      <button class="btn-ghost" (click)="sendSubject()" type="button">send</button>
      <button class="btn-ghost" (click)="addSubject()" type="button">add</button>
    </div>
  </div>
  <div class="example">
    @for (item of subjectArray(); track $index) {
      @let data = subject | async ; 
       <div class="card">
        <div class="index">{{$index}}</div>
        <div class="data">{{data | json}}</div>
       </div>
    }
  </div>
</div>

component.ts 

import { Component, model, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-rxjs-operator',
  imports: [CommonModule, FormsModule],
  templateUrl: './rxjs-operator.html',
  styleUrl: './rxjs-operator.scss',
})
export class RxjsOperator  {
    
  subject = new Subject();

  subjectArray = signal<number[]>([0]); 

  subjectText = model<string>('');  
   
  addSubject() {
    this.subjectArray.update((prev) => [...prev, 1]);
  } 
  sendSubject() {
    this.subject.next(this.subjectText());
  }
 
}

< image / output screen > 
case 1 <Initial Value > : 
To explain the subject . i just create a subject variable in the ts file which we are going to subscribe in the html by declare using @let variable and using async pipe. 
we have a text area where we are going to enter some content and using the send button we are emit the value to the subject . 
and one more button is there right yeah that is used to add new observer to the subject during runtime . this will help you understand the subscriping the logic behind the subject . 

Now the load of the screen only one subscription happends for the subject and the value is null as you see in the below screenshot . and you can't define the initialvalue to the subject while declare it. Let's enter some text in the textarea and see the magic happends

case 2 <Emit Value > : 
< image / user enter value  > 

As you see when we enter value and emit it to the subject it got printed in the screen . 

case 3 < new observer> 

    So far going good right . Now we are goign to add one more observer to our subject. Just click the add that's it new observer added . 
    See the value of the second observer is null while adding . Which means subject doesn't store anything in the memory. whenever new observer added it start from the null . 

    enter some value in the text area you can see both the observer got updated . 
    same is similar if you add n number of observer to the subject. 

Under the Hood : 

    Let explore what happening under the hood of subject . 
    Subject is basically a class that extends the Observable class so it provide the subscribe() to the subject . 

    syntax : 

    class Subject<T> extends Observable<T> implements SubscriptionLike {}

    when a new subscriber added to subject internally it maintained in the map. So that when new value passed to the subject . It get iterated and send tehe value to the all subscriber. 

    Like : 

        newObservere : Map<number, Observer<T>>();

        when the new value is passed to the subject . 
        len is length of the newObservere.
        for (let i = 0; i < len; i++) {
            observers[i].next(value);
        }
        same applied for error callback also.

     asObservable() method implemented in the subject class creates a new Observable with this Subject as the source. 

conclusion 
Hope you understand the concept of how subject is working . Let explore the BehaviorSubject in the next blog 