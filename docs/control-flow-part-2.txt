
Study 2 : 
@for : 
    The @for block repeatedly renders content of a block for each item in a collection.
    you want to iterate a set of template in your html. Here is the block of code for reference : 


html : 
<div class="country-list">
  @if (country$ | async ; as countryList) {
  @for (country of countryList; track
  $index) {
  <div class="country">
    <span>{{ country.flag }}</span>
    <span> {{ country.name.common }} </span>
  </div>
  }
  }
</div>

ts : 

 country$ = this.http.get<any>(this.URL).pipe(
    takeUntil(this._destroy$),
    map((res: any) => res)
  );


Note : 
Angular's @for block does not support flow-modifying statements like JavaScript's continue or break.


Hey wait what is that track keyword inside the for loop. What is the purpose of it : 

track : 
    The value of the track expression determines a key used to associate array items with the views in the DOM. 
    Having clear indication of the item identity allows Angular to execute a minimal set of DOM operations as items are added,
    removed or moved in a collection.

Angular @for provide several implicit variables are always available:

Variable	Meaning
$count	Number of items in a collection iterated over ( return number )
$index	Index of the current row ( return number , similar to js the index will be start with 0)
$first	Whether the current row is the first row( return boolean )
$last	Whether the current row is the last row( return boolean )
$even	Whether the current row index is even ( return boolean )
$odd	Whether the current row index is odd ( return boolean )

Example  :

<div class="country-list">
  @if (country$ | async ; as countryList) { @for (country of countryList; track
  $index ; let index = $index , even = $even, odd = $odd, last = $last , first =
  $first, count = $count; ) {
  <div class="country">
    <div class="label">
      <span>{{ index }} : {{ country.flag }}</span>
      <span> {{ country.name.common }} </span>
    </div>
    <hr />
    <div class="variable">
      <span style="color: red">Odd : {{ odd }} </span>
      <span style="color: blue">Even : {{ even }} </span>
      <span style="color: aqua">Last : {{ last }} </span>
      <span style="color: orange">First : {{ first }} </span>
      <span style="color: green">Count : {{ count }} </span>
    </div>
  </div>

  } }
</div>

Just for the difference i added the color to each variable tag. 

*****************************************************************************************

Awesome! Here’s **Part 2** of your Dev.to blog post on **Control Flow in Angular 20**, focusing on the `@for` block — complete with clear code snippets, explanations, and tips.

---

# 🔁 Angular 20 Control Flow — Part 2: `@for` is the New `*ngFor`

Hey again, Angular devs! 👋

In [Part 1](#), we explored the new `@if`, `@else-if`, and `@else` blocks in Angular 20’s control flow syntax.
Now it's time to tackle **loops** with the powerful and expressive `@for` block.

---

## 🧾 What is `@for`?

The `@for` block in Angular 20 allows you to render a block of content **repeatedly** for each item in a collection — essentially replacing the traditional `*ngFor`.

---

## 🧪 Example 1: Basic Looping with `@for`

### 🧾 Template:

```html
<div class="country-list">
  @if (country$ | async; as countryList) {
    @for (country of countryList; track $index) {
      <div class="country">
        <span>{{ country.flag }}</span>
        <span>{{ country.name.common }}</span>
      </div>
    }
  }
</div>
```

### 🧾 Component (TypeScript):

```ts
country$ = this.http.get<any>(this.URL).pipe(
  takeUntil(this._destroy$),
  map((res: any) => res)
);
```

---

### 📌 Note:

* `@for` is **async-safe**, allowing you to combine it neatly with `@if` and observables.
* You **must** use `track` to optimize performance by helping Angular identify items uniquely.

---

## ❓ Wait… What's This `track` Keyword?

Great question!

### `track`:

The `track` keyword provides a **unique key** for each item in the collection. This helps Angular perform **efficient DOM updates** when the collection changes (e.g., when items are added, removed, or reordered).

It's like `trackBy` in `*ngFor`, but **much cleaner**.

```html
@for (item of items; track item.id) {
  <!-- unique key is item.id -->
}
```

---

## 🧠 Implicit Variables in `@for`

Angular gives us a set of **built-in variables** inside a `@for` block:

| Variable | Meaning                                 |
| -------- | --------------------------------------- |
| `$count` | Total number of items                   |
| `$index` | Index of the current item (starts at 0) |
| `$first` | `true` if this is the first item        |
| `$last`  | `true` if this is the last item         |
| `$even`  | `true` if the index is even             |
| `$odd`   | `true` if the index is odd              |

---

## 🧪 Example 2: Using All Implicit Variables

```html
<div class="country-list">
  @if (country$ | async; as countryList) {
    @for (
      country of countryList;
      track $index;
      let index = $index,
          even = $even,
          odd = $odd,
          last = $last,
          first = $first,
          count = $count
    ) {
      <div class="country">
        <div class="label">
          <span>{{ index }} : {{ country.flag }}</span>
          <span>{{ country.name.common }}</span>
        </div>
        <hr />
        <div class="variable">
          <span style="color: red">Odd: {{ odd }}</span>
          <span style="color: blue">Even: {{ even }}</span>
          <span style="color: aqua">Last: {{ last }}</span>
          <span style="color: orange">First: {{ first }}</span>
          <span style="color: green">Count: {{ count }}</span>
        </div>
      </div>
    }
  }
</div>
```

---

## ❗ Heads-Up

> Angular's `@for` block **does not support** flow-modifying statements like `break` or `continue` — unlike traditional JavaScript loops.

---

## ✅ Summary for Part 2

* Use `@for` to iterate over collections in Angular 20.
* Use `track` for optimized rendering.
* Leverage built-in loop metadata with `$index`, `$count`, etc.
* Combine it with `@if` for reactive, observable-based logic.

---

👉 In **Part 3**, we’ll dive into `@switch` and how to manage multiple conditional templates elegantly.

If you missed **Part 1**, go check it out!

---

**Are you already using the new control flow in your Angular projects?**
Drop your thoughts or code snippets in the comments! 🚀

---

**Tags:**
\#angular #angular20 #webdev #javascript #frontend #tutorial

---

Would you like a cover image for this part too? I can create a fun one showing `*ngFor` being replaced by `@for`.



********************************************************************************************
