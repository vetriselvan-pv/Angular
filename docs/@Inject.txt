
Hey Devs, 

    Welcome to the decorator series in angular. In this post we will learn baout the most important decorator in angular which is @Inject().
    Inject decorator is used to inject the dependency in the component. For Inject we need to create a token.
    Ok , lets explore the @Inject() decorator along with InjectionToken. 

    syntax 
        @Inject ({
            token: any;
            })

    token : 
        - InjectionToken  or  InjectionToken<Type>  

  InjectionToken : 
        - InjectionToken is a class that is used to create a token for the dependency. Type is a type of the dependency.   

    syntax : 

           new InjectionToken<T>(description: string, options?: {
                factory?: () => T;
                providedIn?: Type<any> | 'root' | 'platform' | 'any' | null;
                });

    options : 
        - providedIn : 'root' | 'platform' | 'any' | Type<any> | InjectionToken<any> | undefined;
        - factory : () => T;
        - multi : boolean;

why i need to use injectionToken instead of injectable() class ? 

        InjectionToken is a powerful Angular feature used for dependency injection of values that arenâ€™t classes, such as: Interfaces, Configuration objects, Primitive values ,  Multiple providers for the same token 
        It create a unique token that Angular uses in the DI system.

Note : 

        You can even use tree-shakable providers with providedIn and factory.

Example : 
    Let's jump into some real case example . 

    Just imagine you have a config file 
    