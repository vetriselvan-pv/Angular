
Hey Devs 

    Weâ€™re back with another weekly exploration â€” and this time, weâ€™re diving into an interesting and widely used concept in RxJS: ReplaySubject.

    we discuss about passing the value asyncronously and also we have provision to get the last emitted value also. What new in this ? 

ReplaySubject
    Its similar to the behaviorSubject and it can send multiple value to the new subscribers. 

    syntax : 

        const replaySubject = new ReplaySubject(3); 
    
    you need to pass the buffer count ( basically how many values need to replay)

    Note : ReplaySubject doesn't have any initial value . So when you subscribe before passing the value it will return null 

    In the below example we are covering how the replaySubject works . 

    html 
     
<h3>ReplaySubject</h3>

<div class="text-wrapper">
  <div class="text">
    <textarea
      class="textarea-modern"
      [(ngModel)]="replaySubjectText"
      name="replaySubject"
      id="replaySubject"
    ></textarea>
    <div class="btn-container">
      <button class="btn-ghost" (click)="sendReplaySubject()" type="button">
        send
      </button>
      <button class="btn-ghost" (click)="addReplaySubject()" type="button">
        add
      </button>
    </div>
  </div>
  <div class="example">
    @for (item of replaySubjectArray(); track $index) { @let data =
    replayObservable | async ;
    <div class="card">
      <div class="index">{{$index}}</div>
      @if( data &&data.length > 0 ) { @for( item of data ; track item ; let i =
      $index ) {
      <div class="card">
        <div class="index">{{i}}</div>
        <div class="data">{{item | json}}</div>
      </div>
      } }
      @else {
        <div class="data">
          {{data | json}}
        </div>
      }
    </div>
    }
  </div>
</div>

ts : 

    import { Component, model, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AsyncSubject, BehaviorSubject, ReplaySubject, scan, Subject, tap } from 'rxjs';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-rxjs-operator',
  imports: [CommonModule, FormsModule],
  templateUrl: './rxjs-operator.html',
  styleUrl: './rxjs-operator.scss',
})
export class RxjsOperator implements OnInit{
      replaySubject = new ReplaySubject(2);
  replayObservable = this.replaySubject.asObservable().pipe(
    scan((acc:string[], curr:any) => { 
      return [...acc, curr];
    }, [] as string[])
  );
   addReplaySubject() {
    this.replaySubjectArray.update((prev) => [...prev, 1]);
  }
    sendReplaySubject() {
    this.replaySubject.next(this.replaySubjectText());
  }
}

<image out>

Replay subject is bit different from the other subject . Previously we are getting the initialvalue or last emitted value when we start subscribe . But in this case we will get continous subscribe callback based on the config . 
In the below example i configured to get the last 2 value. when the new observer subscribe to it. 
initialvalue value will be null and if the replaySubject get new value it will be stored in memory .

case 1 : 

On load of the screen . replay subject got subscribed and the value will be null.  In the below screnshot you can refer that initialvalue is null . 


case 2 : 
    Now some data we are passing through replaySubject. For that we are taking the value from the textarea and while click the send button we are assign that to the replaySubject. 
    For the UI representation i used scan operator. We will explore in deep later in this week regards scan operator. 


case 3 : 
    As we continue with the exsisting entry. Now we sent more than two values to the ReplaySubject . When new observer got subscribed it immediately get the last two values. 
    Now if new value got emitted all the subscriber will get the value. 


Under the Hood : 

Inside the ReplaySubject it a class extends Subject 
export class ReplaySubject<T> extends Subject<T> {
     constructor(
    private _bufferSize = Infinity,
    private _windowTime = Infinity,
    private _timestampProvider: TimestampProvider = dateTimestampProvider
  ) {
  }

  next(value: T): void {
    // Got override to send the last value to the new subscribe based on the buffer count
  }
  }



  conclusion 
Hope you understand the concept of how BehaviorSubject is working . Let explore the AsyncSubject in the next blog 

----------------------------------------------------------------------


Hereâ€™s a revised version of your replaySubject.txt content, rewritten as a Medium-style blog post. The structure is more narrative, with improved flow, headings, and a friendly, informative tone.

---

# Understanding ReplaySubject in RxJS: A Practical Guide

Hey Devs ðŸ‘‹

Welcome back to another weekly exploration! This time, weâ€™re diving into one of the most interesting and widely used concepts in RxJS: the **ReplaySubject**. If youâ€™ve ever wondered how to replay previous values to new subscribers in your reactive streams, this post is for you.

## What is a ReplaySubject?

A `ReplaySubject` is similar to a `BehaviorSubject`, but with a powerful twist: it can send multiple previous values to new subscribers, not just the latest one. This makes it incredibly useful when you want late subscribers to catch up on a streamâ€™s history.

### Key Features

- **Buffer Count:** When creating a `ReplaySubject`, you specify a buffer count. This determines how many of the most recent values will be replayed to new subscribers.
- **No Initial Value:** Unlike `BehaviorSubject`, a `ReplaySubject` doesnâ€™t require an initial value. If you subscribe before any values are emitted, youâ€™ll get `null`.

## Getting Started: Syntax

Hereâ€™s how you create a `ReplaySubject` with a buffer of 3:

```typescript
const replaySubject = new ReplaySubject(3);
```

This means the last three emitted values will be replayed to any new subscriber.

## Practical Example: How ReplaySubject Works

Letâ€™s walk through a practical example to see `ReplaySubject` in action.

### HTML Template

```html
<h3>ReplaySubject</h3>
<div class="text-wrapper">
  <div class="text">
    <textarea [(ngModel)]="replaySubjectText"></textarea>
    <div class="btn-container">
      <button (click)="sendReplaySubject()">Send</button>
      <button (click)="addReplaySubject()">Add</button>
    </div>
  </div>
  <div class="example">
    <!-- Display logic for replayed values -->
  </div>
</div>
```

### TypeScript Component

```typescript
import { Component, OnInit } from '@angular/core';
import { ReplaySubject, scan } from 'rxjs';

@Component({
  selector: 'app-rxjs-operator',
  templateUrl: './rxjs-operator.html',
  styleUrl: './rxjs-operator.scss',
})
export class RxjsOperator implements OnInit {
  replaySubject = new ReplaySubject(2);
  replayObservable = this.replaySubject.asObservable().pipe(
    scan((acc: string[], curr: any) => [...acc, curr], [])
  );

  addReplaySubject() {
    // Logic to add a value (for demonstration)
  }

  sendReplaySubject() {
    this.replaySubject.next(this.replaySubjectText());
  }
}
```

### How It Works

- **On Load:** When the component loads and subscribes to the `ReplaySubject`, the initial value is `null` (since no value has been emitted yet).
- **Sending Data:** When you enter data in the textarea and click "Send", that value is emitted to the `ReplaySubject`.
- **Buffering:** If you send more than two values (our buffer count), only the last two will be replayed to any new subscriber.
- **Continuous Updates:** All subscribers receive new values as they are emitted.

## Real-World Scenarios

Imagine you have a chat application. When a new user joins, you might want them to see the last few messages sent before they arrived. `ReplaySubject` makes this easyâ€”just set the buffer count to the number of messages you want to replay.

## Conclusion

`ReplaySubject` is a powerful tool in RxJS for managing streams where you want new subscribers to receive a history of values. Unlike `BehaviorSubject`, which only replays the latest value, `ReplaySubject` can replay multiple values, making it ideal for scenarios like chat histories, notifications, or any event log.

I hope this post helped you understand how `ReplaySubject` works! In our next blog, weâ€™ll explore the `AsyncSubject`â€”stay tuned!

---

Let me know if you want this in markdown, HTML, or any other format, or if youâ€™d like to add images/code snippets for Medium!