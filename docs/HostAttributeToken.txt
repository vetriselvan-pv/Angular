
Hey devs 
    As you expected today we need to drop a post about decorator series right . Yeah but this time one of my friend suggested a new injection token based modern approach .
    Exactly alternative approach to implement the @Attribute decorator. Ok let start coding .

HostAttributeToken:
    Creates a token that can be used to inject static attributes of the host node.A Modern approach to @Attribute decorator in older days. 

Syntax : 

    new HostAttributeToken('attr');

Example : 

    As we already discussed about the @Attribute Decorator . 
    same example we are going to use, one small change is instead of Attribute decorator we going to use the HostAttributeToken. 
    Both have the same functionality but the HostAttributeToken having the advantage of DI-friendly and testable code. 
    
 
 Directive.ts 



 import { AfterViewInit, Attribute, Directive, ElementRef, HostAttributeToken, inject, OnInit, Renderer2 } from '@angular/core';

@Directive({
  selector: '[fontType]'
})
export class FontType  implements OnInit, AfterViewInit{

  private render : Renderer2 = inject(Renderer2);
  private el : ElementRef  = inject(ElementRef)
  public font :  string = inject(new HostAttributeToken('font'))

  constructor( ) { 
    console.log(this.font)
  }

  ngOnInit(): void {
     switch(this.font){
        case 'italic' : {
          this.render.setStyle(this.el.nativeElement ,'color','red');
           break;
        };
        case 'bold' : {
          this.render.setStyle(this.el.nativeElement ,'color','green');
           break;
        };
        case 'underline' : {
          this.render.setStyle(this.el.nativeElement ,'color','orange');
           break;
        };
        default : {
          console.log('font not provided')
        }
     }
  }

  ngAfterViewInit(): void {
    console.log('Before changing the attribute value : ',this.font);
    this.render.setAttribute(this.el.nativeElement,'font', 'some_random_value');
    console.warn('After changing the attribute value : ',this.font)
  }

}


component file : 

    import { Component, HostListener } from '@angular/core'; 
import { FontType } from '../../directive/role';

@Component({
  selector: 'app-about',
  imports: [ FontType],
  template: `<h1 ><u>About Me</u></h1>
    <p >
      I‚Äôm a <b >frontend developer</b> and
      <b fontType font="bold">freelancer</b> passionate about building
      beautiful, responsive, and user-friendly web interfaces.
    </p>
    <p>
      I specialize in <b><u fontType font="underline">HTML</u></b
      >, <b><u fontType font="underline">CSS</u></b
      >, <b><u fontType font="underline">JavaScript</u></b
      >, and modern frameworks like <b>React</b> and <b>Vue</b>. I enjoy turning
      complex problems into simple, elegant solutions.
    </p>
    <p>
      <i fontType font="italic"
        >I believe that great design is just as important as great code</i
      >, and I‚Äôm always exploring <u>new technologies</u> and tools to enhance
      user experience.
    </p>
    <p>
      Whether it‚Äôs building from scratch or bringing life to an existing
      project, I‚Äôm ready to help.
      <b
        ><i><u>Let‚Äôs create something amazing together!</u></i></b
      >
    </p>`,
  styleUrl: './about.scss',
})
export class About {
  constructor() {} 
}


Pros:

‚úÖ DI-friendly: Works with inject(), usable outside constructors.

‚úÖ Supports standalone components and newer DI patterns.

‚úÖ Testable & mockable: You can override in providers. 

‚úÖ Can be used in factories, providers, or any DI context (not just constructors).

Cons : 

    Still reads a static value ‚Äì not reactive to attribute changes.


    **********************************************    **********************************************    **********************************************    **********************************************    **********************************************

    MEDIUM 


Exploring HostAttributeToken: A Modern Angular Alternative to @Attribute Decorator üîç

Hey devs üëã,
As you probably expected, today we're back with another drop in our Angular decorator series! But this time, instead of revisiting the good ol' @Attribute decorator, we're diving into something modern, DI-friendly, and just‚Ä¶ slicker.
Thanks to a tip from a fellow dev, we're looking at HostAttributeToken‚Ää-‚Ääa fresh way to inject host element attributes using Angular's newer DI system.
What is HostAttributeToken?
HostAttributeToken creates a DI token that allows you to inject static attributes from a host element‚Ää-‚Ääjust like @Attribute, but with more flexibility.
Why Use¬†It?
Unlike @Attribute, which only works in constructors and isn't injectable elsewhere, HostAttributeToken:
Works with inject() ‚úÖ
Plays nicely with standalone components/directives ‚úÖ
Can be mocked/tested ‚úÖ
Usable in factories and custom providers ‚úÖ

Syntax
new HostAttributeToken('attributeName');
Use it withinject():
const font = inject(new HostAttributeToken('font'));
Let's look at a real example¬†. üëá
üõ†Ô∏è Refactoring the @Attribute Example Using HostAttributeToken
We're going to build a simple directive that reads a font attribute and applies styles based on its value.
üìÅ font-type.directive.ts
import {
  AfterViewInit,
  Directive,
  ElementRef,
  HostAttributeToken,
  OnInit,
  Renderer2,
  inject,
} from '@angular/core';

@Directive({
  selector: '[fontType]',
  standalone: true,
})
export class FontType implements OnInit, AfterViewInit {
  private renderer = inject(Renderer2);
  private el = inject(ElementRef);
  public font = inject(new HostAttributeToken('font'));

ngOnInit(): void {
    switch (this.font) {
      case 'italic':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'red');
        break;
      case 'bold':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'green');
        break;
      case 'underline':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'orange');
        break;
      default:
        console.log('font not provided');
    }
  }

ngAfterViewInit(): void {
    console.log('Before changing the attribute value:', this.font);
    this.renderer.setAttribute(this.el.nativeElement, 'font', 'some_random_value');
    console.warn('After changing the attribute value:', this.font);
  }
}
üß© Integrating the Directive in a Component
üìÅ about.component.ts
import { Component } from '@angular/core';
import { FontType } from '../../directive/font-type.directive';

@Component({
  selector: 'app-about',
  standalone: true,
  imports: [FontType],
  template: `
    <h1><u>About Me</u></h1>
    <p>
      I'm a <b>frontend developer</b> and
      <b fontType font="bold">freelancer</b> passionate about building beautiful, responsive, and user-friendly web interfaces.
    </p>
    <p>
      I specialize in <b><u fontType font="underline">HTML</u></b>,
      <b><u fontType font="underline">CSS</u></b>,
      <b><u fontType font="underline">JavaScript</u></b>, and modern frameworks like <b>React</b> and <b>Vue</b>.
    </p>
    <p>
      <i fontType font="italic">
        I believe that great design is just as important as great code
      </i>, and I'm always exploring new technologies.
    </p>
    <p>
      Whether it's building from scratch or bringing life to an existing project - I'm ready to help.
      <b><i><u>Let's create something amazing together!</u></i></b>
    </p>
  `,
})
export class AboutComponent {}
Output¬†
Pros of HostAttributeToken
üîÅ DI-friendly: Works with inject(), usable outside constructors.
üß© Supports standalone components and newer DI patterns.
üß™ Testable & Mockable: You can override in providers.
¬†‚öôÔ∏è Can be used in factories, providers, or any DI context (not just constructors).
‚ö†Ô∏è A Quick¬†Heads-Up
Not reactive: Like‚Å£@Attribute, HostAttributeToken reads the attribute once-it doesn't update if the attribute changes later.

üì¶ Final¬†Thoughts
If you're building Angular apps with standalone components or looking for a cleaner, more flexible way to inject attributes, HostAttributeTokenit's absolutely worth trying out. It keeps your code testable, future-proof, and aligned with Angular's modern direction.
üôå Let's¬†Discuss
Have you tried HostAttributeToken in your apps yet?
Drop your thoughts below üëá and let's keep learning together! üí¨

    **********************************************    **********************************************    **********************************************    **********************************************    **********************************************
    Dev.to

    From @Attribute to HostAttributeToken: A Modern Angular DI Pattern

    Hey devs! üëã

As promised, we're continuing our series on Angular decorators. But today, we‚Äôre doing something a bit different. A friend recently pointed me to a more modern and DI-friendly alternative to the traditional `@Attribute` decorator ‚Äî say hello to `HostAttributeToken`.

Let‚Äôs dive into how this new approach works and how you can use it to write cleaner, more testable Angular code.


### What is `HostAttributeToken`?

`HostAttributeToken` allows you to inject static attribute values from the host element in a more flexible, testable, and dependency injection (DI)-friendly way.

In older Angular versions, you‚Äôd use the `@Attribute` decorator for this. While that works fine, `HostAttributeToken` provides several advantages ‚Äî especially when working with standalone components or modern DI patterns.

#### Syntax

```ts
new HostAttributeToken('attrName');
```


### Example: Replacing `@Attribute` with `HostAttributeToken`

We‚Äôll reuse an example we discussed earlier using the `@Attribute` decorator ‚Äî but this time, we‚Äôll refactor it using `HostAttributeToken`.

Both approaches achieve the same functionality, but `HostAttributeToken` allows the attribute value to be injected using the `inject()` function, outside of the constructor.

#### Directive: `FontType`

```ts
import { AfterViewInit, Directive, ElementRef, HostAttributeToken, inject, OnInit, Renderer2 } from '@angular/core';

@Directive({
  selector: '[fontType]'
})
export class FontTypeDirective implements OnInit, AfterViewInit {
  private renderer = inject(Renderer2);
  private el = inject(ElementRef);
  public font: string = inject(new HostAttributeToken('font'));

  constructor() {
    console.log(this.font);
  }

  ngOnInit(): void {
    switch (this.font) {
      case 'italic':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'red');
        break;
      case 'bold':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'green');
        break;
      case 'underline':
        this.renderer.setStyle(this.el.nativeElement, 'color', 'orange');
        break;
      default:
        console.log('Font not provided');
    }
  }

  ngAfterViewInit(): void {
    console.log('Before changing the attribute value:', this.font);
    this.renderer.setAttribute(this.el.nativeElement, 'font', 'some_random_value');
    console.warn('After changing the attribute value:', this.font);
  }
}
```


### Component Usage

```ts
import { Component } from '@angular/core';
import { FontTypeDirective } from '../../directive/role';

@Component({
  selector: 'app-about',
  standalone: true,
  imports: [FontTypeDirective],
  template: `
    <h1><u>About Me</u></h1>
    <p>
      I‚Äôm a <b>frontend developer</b> and
      <b fontType font="bold">freelancer</b> passionate about building
      beautiful, responsive, and user-friendly web interfaces.
    </p>
    <p>
      I specialize in <b><u fontType font="underline">HTML</u></b>,
      <b><u fontType font="underline">CSS</u></b>,
      <b><u fontType font="underline">JavaScript</u></b>,
      and modern frameworks like <b>React</b> and <b>Vue</b>. I enjoy turning
      complex problems into simple, elegant solutions.
    </p>
    <p>
      <i fontType font="italic">I believe that great design is just as important as great code</i>,
      and I‚Äôm always exploring <u>new technologies</u> and tools to enhance user experience.
    </p>
    <p>
      Whether it‚Äôs building from scratch or improving an existing project,
      I‚Äôm ready to help.
      <b><i><u>Let‚Äôs create something amazing together!</u></i></b>
    </p>
  `,
  styleUrls: ['./about.scss'],
})
export class AboutComponent {}
```


### Pros and Cons of `HostAttributeToken`

#### ‚úÖ Pros:

* **DI-friendly**: Works seamlessly with `inject()`, even outside constructors.
* **Flexible**: Compatible with standalone components and modern DI patterns.
* **Testable & Mockable**: Easily overridden in unit tests or custom providers.
* **Versatile**: Usable in factories, services, and other DI contexts.

#### ‚ö†Ô∏è Cons:

* **Static Only**: Still reads a static value from the attribute ‚Äî it‚Äôs not reactive to changes made after initialization.


### Conclusion

`HostAttributeToken` is a modern and powerful replacement for `@Attribute`. If you're embracing Angular‚Äôs latest DI improvements, this is definitely a pattern worth adopting.

Have you tried this approach yet? Let me know your thoughts and experiences in the comments below! üöÄ
 
### ‚úçÔ∏è Author: [Vetriselvan](https://dev.to/vetriselvan_11)

üë®‚Äçüíª Frontend Developer | Code Lover | Exploring Angular‚Äôs future